{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python AsyncAPI Python library for translate asyncapi specification to python code, without code generation. Documentation : https://dutradda.github.io/asyncapi-python/ Source Code : https://github.com/dutradda/asyncapi-python Key Features Reads an asyncapi specification and create publishers and subscribers from it Provides application for create subscribers Support for kafka, redis and postgres protocols (same as broadcaster library) Requirements Python 3.7+ broadcaster jsonschema requests (Optional for http specification) typer (Optional for subscriber application) pyyaml (Optional for yaml specification) Package extra installs: http yaml kafka redis postgres subscriber Installation $ pip install asyncapi[http,yaml,redis,subscriber] Specification Example asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API do manage users servers : development : url : localhost protocol : redis description : Development Broker Server channels : user/update : description : Topic for user updates subscribe : operationId : receive_user_update message : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json Creating subscribers module from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message [ 'id' ] } \" ) Start subscriber to listen events PYTHONPATH = . asyncapi-subscriber \\ --url api-spec.yaml \\ --channel user/update \\ --operations-module user_events Waiting messages... Publishing Updates import asyncio import os from asyncapi import build_api spec = os . path . join ( os . path . dirname ( os . path . realpath ( __file__ )), 'api-spec.yaml' , ) api = build_api ( spec ) message = { 'id' : 'fake-user' , 'name' : 'Fake User' , 'age' : 33 , } asyncio . run ( api . publish ( 'user/update' , message )) print ( f \"Published update for user= { message [ 'id' ] } \" ) Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user","title":"Home"},{"location":"#python-asyncapi","text":"Python library for translate asyncapi specification to python code, without code generation. Documentation : https://dutradda.github.io/asyncapi-python/ Source Code : https://github.com/dutradda/asyncapi-python","title":"Python AsyncAPI"},{"location":"#key-features","text":"Reads an asyncapi specification and create publishers and subscribers from it Provides application for create subscribers Support for kafka, redis and postgres protocols (same as broadcaster library)","title":"Key Features"},{"location":"#requirements","text":"Python 3.7+ broadcaster jsonschema requests (Optional for http specification) typer (Optional for subscriber application) pyyaml (Optional for yaml specification) Package extra installs: http yaml kafka redis postgres subscriber","title":"Requirements"},{"location":"#installation","text":"$ pip install asyncapi[http,yaml,redis,subscriber]","title":"Installation"},{"location":"#specification-example","text":"asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API do manage users servers : development : url : localhost protocol : redis description : Development Broker Server channels : user/update : description : Topic for user updates subscribe : operationId : receive_user_update message : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json","title":"Specification Example"},{"location":"#creating-subscribers-module","text":"from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message [ 'id' ] } \" )","title":"Creating subscribers module"},{"location":"#start-subscriber-to-listen-events","text":"PYTHONPATH = . asyncapi-subscriber \\ --url api-spec.yaml \\ --channel user/update \\ --operations-module user_events Waiting messages...","title":"Start subscriber to listen events"},{"location":"#publishing-updates","text":"import asyncio import os from asyncapi import build_api spec = os . path . join ( os . path . dirname ( os . path . realpath ( __file__ )), 'api-spec.yaml' , ) api = build_api ( spec ) message = { 'id' : 'fake-user' , 'name' : 'Fake User' , 'age' : 33 , } asyncio . run ( api . publish ( 'user/update' , message )) print ( f \"Published update for user= { message [ 'id' ] } \" ) Published update for user=fake-user","title":"Publishing Updates"},{"location":"#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"changelog/","text":"CHANGELOG UNRELEASED Create docs Fix api publish and listen methods 0.3.1 - 2020-07-03 Support load subscriber as script 0.3.0 - 2020-07-03 Create subscriber cli 0.2.0 - 2020-07-02 Create publish and listen methods for api - 2020-07-02 Create Api object from asyncapi spec","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"changelog/#unreleased","text":"Create docs Fix api publish and listen methods","title":"UNRELEASED"},{"location":"changelog/#031-2020-07-03","text":"Support load subscriber as script","title":"0.3.1 - 2020-07-03"},{"location":"changelog/#030-2020-07-03","text":"Create subscriber cli","title":"0.3.0 - 2020-07-03"},{"location":"changelog/#020-2020-07-02","text":"Create publish and listen methods for api","title":"0.2.0 - 2020-07-02"},{"location":"changelog/#-2020-07-02","text":"Create Api object from asyncapi spec","title":"- 2020-07-02"},{"location":"contributing/","text":"Starting Development git clone git@github.com:dutradda/asyncapi-python.git --recursive cd asyncapi make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-asyncapi bake dependencies Running the integration suite: bake integration Other bake tasks: bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Development - Contributing"},{"location":"contributing/#starting-development","text":"git clone git@github.com:dutradda/asyncapi-python.git --recursive cd asyncapi make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-asyncapi bake dependencies","title":"Starting Development"},{"location":"contributing/#running-the-integration-suite","text":"bake integration","title":"Running the integration suite:"},{"location":"contributing/#other-bake-tasks","text":"bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Other bake tasks:"}]}