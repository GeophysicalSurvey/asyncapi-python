{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python AsyncAPI Python library for translate asyncapi specification to python code, without code generation. AsyncAPI Pattern : https://asyncapi.io Documentation : https://dutradda.github.io/asyncapi-python/ Source Code : https://github.com/dutradda/asyncapi-python Key Features Reads an asyncapi specification and create publishers and subscribers from it Provides application for create subscribers Support for kafka, redis and postgres protocols (same as broadcaster library) Expose in http the auto-generated specification Requirements Python 3.8+ broadcaster jsondaora requests (Optional for http specification) typer (Optional for subscriber application) pyyaml (Optional for yaml specification) apidaora (Optional for expose specification) Package extra installs: http yaml kafka redis postgres subscriber docs Installation $ pip install asyncapi[http,yaml,redis,subscriber] Specification Example asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API do manage users servers : development : url : localhost protocol : redis description : Development Broker Server channels : user/update : description : Topic for user updates subscribe : operationId : receive_user_update message : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json Creating subscribers module # user_events.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events PYTHONPATH = . asyncapi-subscriber \\ --url api-spec.yaml \\ --api-module user_events Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api api = build_api ( 'api-spec.yaml' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user","title":"Home"},{"location":"#python-asyncapi","text":"Python library for translate asyncapi specification to python code, without code generation. AsyncAPI Pattern : https://asyncapi.io Documentation : https://dutradda.github.io/asyncapi-python/ Source Code : https://github.com/dutradda/asyncapi-python","title":"Python AsyncAPI"},{"location":"#key-features","text":"Reads an asyncapi specification and create publishers and subscribers from it Provides application for create subscribers Support for kafka, redis and postgres protocols (same as broadcaster library) Expose in http the auto-generated specification","title":"Key Features"},{"location":"#requirements","text":"Python 3.8+ broadcaster jsondaora requests (Optional for http specification) typer (Optional for subscriber application) pyyaml (Optional for yaml specification) apidaora (Optional for expose specification) Package extra installs: http yaml kafka redis postgres subscriber docs","title":"Requirements"},{"location":"#installation","text":"$ pip install asyncapi[http,yaml,redis,subscriber]","title":"Installation"},{"location":"#specification-example","text":"asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API do manage users servers : development : url : localhost protocol : redis description : Development Broker Server channels : user/update : description : Topic for user updates subscribe : operationId : receive_user_update message : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json","title":"Specification Example"},{"location":"#creating-subscribers-module","text":"# user_events.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Creating subscribers module"},{"location":"#start-subscriber-to-listen-events","text":"PYTHONPATH = . asyncapi-subscriber \\ --url api-spec.yaml \\ --api-module user_events Waiting messages...","title":"Start subscriber to listen events"},{"location":"#publishing-updates","text":"# publish.py import asyncio from asyncapi import build_api api = build_api ( 'api-spec.yaml' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) Published update for user=fake-user","title":"Publishing Updates"},{"location":"#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"auto-spec/","text":"Declaring Specification with Python Code Creating subscribers module # user_events.py import dataclasses from typing import Optional from asyncapi import Spec spec = Spec ( 'User Events' , development = 'redis://localhost' ) @dataclasses . dataclass class UserUpdateMessage : id : str name : Optional [ str ] = None age : Optional [ int ] = None @spec . subscribe ( channel_name = 'user/update' ) async def receive_user_update ( message : UserUpdateMessage ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events PYTHONPATH = . asyncapi-subscriber --api-module user_events Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'user_events' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user","title":"Declaring Specification"},{"location":"auto-spec/#declaring-specification-with-python-code","text":"","title":"Declaring Specification with Python Code"},{"location":"auto-spec/#creating-subscribers-module","text":"# user_events.py import dataclasses from typing import Optional from asyncapi import Spec spec = Spec ( 'User Events' , development = 'redis://localhost' ) @dataclasses . dataclass class UserUpdateMessage : id : str name : Optional [ str ] = None age : Optional [ int ] = None @spec . subscribe ( channel_name = 'user/update' ) async def receive_user_update ( message : UserUpdateMessage ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Creating subscribers module"},{"location":"auto-spec/#start-subscriber-to-listen-events","text":"PYTHONPATH = . asyncapi-subscriber --api-module user_events Waiting messages...","title":"Start subscriber to listen events"},{"location":"auto-spec/#publishing-updates","text":"# publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'user_events' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) Published update for user=fake-user","title":"Publishing Updates"},{"location":"auto-spec/#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"changelog/","text":"CHANGELOG 0.6.1 - 2020-07-08 Update docs 0.6.0 - 2020-07-08 Expose in http the auto-generated specification 0.5.0 - 2020-07-07 Refactor api 0.4.0 - 2020-07-06 Create docs Fix api publish and listen methods 0.3.1 - 2020-07-03 Support load subscriber as script 0.3.0 - 2020-07-03 Create subscriber cli 0.2.0 - 2020-07-02 Create publish and listen methods for api - 2020-07-02 Create Api object from asyncapi spec","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"changelog/#061-2020-07-08","text":"Update docs","title":"0.6.1 - 2020-07-08"},{"location":"changelog/#060-2020-07-08","text":"Expose in http the auto-generated specification","title":"0.6.0 - 2020-07-08"},{"location":"changelog/#050-2020-07-07","text":"Refactor api","title":"0.5.0 - 2020-07-07"},{"location":"changelog/#040-2020-07-06","text":"Create docs Fix api publish and listen methods","title":"0.4.0 - 2020-07-06"},{"location":"changelog/#031-2020-07-03","text":"Support load subscriber as script","title":"0.3.1 - 2020-07-03"},{"location":"changelog/#030-2020-07-03","text":"Create subscriber cli","title":"0.3.0 - 2020-07-03"},{"location":"changelog/#020-2020-07-02","text":"Create publish and listen methods for api","title":"0.2.0 - 2020-07-02"},{"location":"changelog/#-2020-07-02","text":"Create Api object from asyncapi spec","title":"- 2020-07-02"},{"location":"contributing/","text":"Starting Development git clone git@github.com:dutradda/asyncapi-python.git --recursive cd asyncapi make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-asyncapi bake dependencies Running the integration suite: bake integration Other bake tasks: bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Development - Contributing"},{"location":"contributing/#starting-development","text":"git clone git@github.com:dutradda/asyncapi-python.git --recursive cd asyncapi make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-asyncapi bake dependencies","title":"Starting Development"},{"location":"contributing/#running-the-integration-suite","text":"bake integration","title":"Running the integration suite:"},{"location":"contributing/#other-bake-tasks","text":"bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Other bake tasks:"},{"location":"expose-docs/","text":"Serving the AsyncAPI Docs Serve docs from an already created spec PYTHONPATH = . asyncapi-docs --api-module user_events INFO: Started server process [...] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Application startup complete. INFO: Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit) Create subscriber module # user_events_http.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events from exposed spec PYTHONPATH = . asyncapi-subscriber \\ --url http://localhost:5000/asyncapi.json \\ --api-module user_events_http Publishing updates from exposed spec # publish.py import asyncio from asyncapi import build_api api = build_api ( 'http://localhost:5000/asyncapi.json' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user","title":"Expose Docs"},{"location":"expose-docs/#serving-the-asyncapi-docs","text":"","title":"Serving the AsyncAPI Docs"},{"location":"expose-docs/#serve-docs-from-an-already-created-spec","text":"PYTHONPATH = . asyncapi-docs --api-module user_events INFO: Started server process [...] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Application startup complete. INFO: Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit)","title":"Serve docs from an already created spec"},{"location":"expose-docs/#create-subscriber-module","text":"# user_events_http.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Create subscriber module"},{"location":"expose-docs/#start-subscriber-to-listen-events-from-exposed-spec","text":"PYTHONPATH = . asyncapi-subscriber \\ --url http://localhost:5000/asyncapi.json \\ --api-module user_events_http","title":"Start subscriber to listen events from exposed spec"},{"location":"expose-docs/#publishing-updates-from-exposed-spec","text":"# publish.py import asyncio from asyncapi import build_api api = build_api ( 'http://localhost:5000/asyncapi.json' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) Published update for user=fake-user","title":"Publishing updates from exposed spec"},{"location":"expose-docs/#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"}]}