{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python AsyncAPI Python library for translate asyncapi specification to python code, without code generation. AsyncAPI Pattern : https://asyncapi.io Documentation : https://dutradda.github.io/asyncapi-python/ Source Code : https://github.com/dutradda/asyncapi-python Key Features Reads an asyncapi specification and create publishers and subscribers from it Support for specification declaration with dataclasses Provides application for create subscribers Support for kafka, redis and postgres protocols (same as broadcaster library) Extra support for google cloud pubsub service Expose in http the auto-generated specification Requirements Python 3.8+ broadcaster jsondaora requests (Optional for http specification) typer (Optional for subscriber application) pyyaml (Optional for yaml specification) apidaora (Optional for expose specification) Package extra installs: http yaml kafka redis postgres subscriber docs google-cloud-pubsub Installation $ pip install asyncapi[http,yaml,redis,subscriber,docs] YAML Specification Example asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API to manage users servers : development : url : localhost protocol : redis description : Development Broker Server channels : user/update : description : Topic for user updates subscribe : operationId : receive_user_update message : $ref : '#/components/messages/UserUpdate' publish : message : $ref : '#/components/messages/UserUpdate' components : messages : UserUpdate : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json Creating subscribers module # user_events.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events PYTHONPATH = . asyncapi-subscriber \\ --url api-spec.yaml \\ --api-module user_events Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api api = build_api ( 'api-spec.yaml' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user Expose Specification asyncapi-docs --path api-spec.yaml curl -i localhost:5000/asyncapi.yaml Python Specification Example # specification.py import dataclasses from typing import Optional import asyncapi @dataclasses . dataclass class UserUpdatePayload : id : str name : Optional [ str ] = None age : Optional [ int ] = None dev_server = asyncapi . Server ( url = 'localhost' , protocol = asyncapi . ProtocolType . REDIS , description = 'Development Broker Server' , ) message = asyncapi . Message ( name = 'userUpdate' , title = 'User Update' , summary = 'Inform about users updates' , payload = UserUpdatePayload , ) user_update_channel = asyncapi . Channel ( description = 'Topic for user updates' , subscribe = asyncapi . Operation ( operation_id = 'receive_user_update' , message = message , ), publish = asyncapi . Operation ( message = message ), ) spec = asyncapi . Specification ( info = asyncapi . Info ( title = 'User API' , version = '1.0.0' , description = 'API to manage users' , ), servers = { 'development' : dev_server }, channels = { 'user/update' : user_update_channel }, components = asyncapi . Components ( messages = { 'UserUpdate' : message }), ) Creating subscribers module # py_spec_user_events.py import specification spec = specification . spec async def receive_user_update ( message : specification . UserUpdatePayload , ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events PYTHONPATH = . asyncapi-subscriber --api-module user_events Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'specification' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user Expose Specification PYTHONPATH = . asyncapi-docs --api-module specification curl -i localhost:5000/asyncapi.yaml","title":"Home"},{"location":"#python-asyncapi","text":"Python library for translate asyncapi specification to python code, without code generation. AsyncAPI Pattern : https://asyncapi.io Documentation : https://dutradda.github.io/asyncapi-python/ Source Code : https://github.com/dutradda/asyncapi-python","title":"Python AsyncAPI"},{"location":"#key-features","text":"Reads an asyncapi specification and create publishers and subscribers from it Support for specification declaration with dataclasses Provides application for create subscribers Support for kafka, redis and postgres protocols (same as broadcaster library) Extra support for google cloud pubsub service Expose in http the auto-generated specification","title":"Key Features"},{"location":"#requirements","text":"Python 3.8+ broadcaster jsondaora requests (Optional for http specification) typer (Optional for subscriber application) pyyaml (Optional for yaml specification) apidaora (Optional for expose specification) Package extra installs: http yaml kafka redis postgres subscriber docs google-cloud-pubsub","title":"Requirements"},{"location":"#installation","text":"$ pip install asyncapi[http,yaml,redis,subscriber,docs]","title":"Installation"},{"location":"#yaml-specification-example","text":"asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API to manage users servers : development : url : localhost protocol : redis description : Development Broker Server channels : user/update : description : Topic for user updates subscribe : operationId : receive_user_update message : $ref : '#/components/messages/UserUpdate' publish : message : $ref : '#/components/messages/UserUpdate' components : messages : UserUpdate : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json","title":"YAML Specification Example"},{"location":"#creating-subscribers-module","text":"# user_events.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Creating subscribers module"},{"location":"#start-subscriber-to-listen-events","text":"PYTHONPATH = . asyncapi-subscriber \\ --url api-spec.yaml \\ --api-module user_events Waiting messages...","title":"Start subscriber to listen events"},{"location":"#publishing-updates","text":"# publish.py import asyncio from asyncapi import build_api api = build_api ( 'api-spec.yaml' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user","title":"Publishing Updates"},{"location":"#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"#expose-specification","text":"asyncapi-docs --path api-spec.yaml curl -i localhost:5000/asyncapi.yaml","title":"Expose Specification"},{"location":"#python-specification-example","text":"# specification.py import dataclasses from typing import Optional import asyncapi @dataclasses . dataclass class UserUpdatePayload : id : str name : Optional [ str ] = None age : Optional [ int ] = None dev_server = asyncapi . Server ( url = 'localhost' , protocol = asyncapi . ProtocolType . REDIS , description = 'Development Broker Server' , ) message = asyncapi . Message ( name = 'userUpdate' , title = 'User Update' , summary = 'Inform about users updates' , payload = UserUpdatePayload , ) user_update_channel = asyncapi . Channel ( description = 'Topic for user updates' , subscribe = asyncapi . Operation ( operation_id = 'receive_user_update' , message = message , ), publish = asyncapi . Operation ( message = message ), ) spec = asyncapi . Specification ( info = asyncapi . Info ( title = 'User API' , version = '1.0.0' , description = 'API to manage users' , ), servers = { 'development' : dev_server }, channels = { 'user/update' : user_update_channel }, components = asyncapi . Components ( messages = { 'UserUpdate' : message }), )","title":"Python Specification Example"},{"location":"#creating-subscribers-module_1","text":"# py_spec_user_events.py import specification spec = specification . spec async def receive_user_update ( message : specification . UserUpdatePayload , ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Creating subscribers module"},{"location":"#start-subscriber-to-listen-events_1","text":"PYTHONPATH = . asyncapi-subscriber --api-module user_events Waiting messages...","title":"Start subscriber to listen events"},{"location":"#publishing-updates_1","text":"# publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'specification' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user","title":"Publishing Updates"},{"location":"#receive-updates_1","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"#expose-specification_1","text":"PYTHONPATH = . asyncapi-docs --api-module specification curl -i localhost:5000/asyncapi.yaml","title":"Expose Specification"},{"location":"changelog/","text":"CHANGELOG 0.12.0 - 2020-10-02 Improve gcloud pubsub backend performance 0.11.1 - 2020-09-29 Improve custom logging 0.11.0 - 2020-09-29 Improve api.listen error handling 0.10.0 - 2020-09-26 Improve gcloud pubsub backend 0.9.0 - 2020-09-19 Improve documentation Create EventsHandler class from broadcaster lib Add support for Google Cloud Platform PubSub service 0.8.0 - 2020-09-17 Improve specification exposition Fix specification dataclasses 0.7.2 - 2020-09-04 Improve api.listen logging 0.7.1 - 2020-07-23 Improve subscriber error handler 0.7.0 - 2020-07-11 Add support for pubsub protocol Fix api for non-dataclasses messsages 0.6.1 - 2020-07-08 Update docs 0.6.0 - 2020-07-08 Expose in http the auto-generated specification 0.5.0 - 2020-07-07 Refactor api 0.4.0 - 2020-07-06 Create docs Fix api publish and listen methods 0.3.1 - 2020-07-03 Support load subscriber as script 0.3.0 - 2020-07-03 Create subscriber cli 0.2.0 - 2020-07-02 Create publish and listen methods for api - 2020-07-02 Create Api object from asyncapi spec","title":"Changelog"},{"location":"changelog/#changelog","text":"","title":"CHANGELOG"},{"location":"changelog/#0120-2020-10-02","text":"Improve gcloud pubsub backend performance","title":"0.12.0 - 2020-10-02"},{"location":"changelog/#0111-2020-09-29","text":"Improve custom logging","title":"0.11.1 - 2020-09-29"},{"location":"changelog/#0110-2020-09-29","text":"Improve api.listen error handling","title":"0.11.0 - 2020-09-29"},{"location":"changelog/#0100-2020-09-26","text":"Improve gcloud pubsub backend","title":"0.10.0 - 2020-09-26"},{"location":"changelog/#090-2020-09-19","text":"Improve documentation Create EventsHandler class from broadcaster lib Add support for Google Cloud Platform PubSub service","title":"0.9.0 - 2020-09-19"},{"location":"changelog/#080-2020-09-17","text":"Improve specification exposition Fix specification dataclasses","title":"0.8.0 - 2020-09-17"},{"location":"changelog/#072-2020-09-04","text":"Improve api.listen logging","title":"0.7.2 - 2020-09-04"},{"location":"changelog/#071-2020-07-23","text":"Improve subscriber error handler","title":"0.7.1 - 2020-07-23"},{"location":"changelog/#070-2020-07-11","text":"Add support for pubsub protocol Fix api for non-dataclasses messsages","title":"0.7.0 - 2020-07-11"},{"location":"changelog/#061-2020-07-08","text":"Update docs","title":"0.6.1 - 2020-07-08"},{"location":"changelog/#060-2020-07-08","text":"Expose in http the auto-generated specification","title":"0.6.0 - 2020-07-08"},{"location":"changelog/#050-2020-07-07","text":"Refactor api","title":"0.5.0 - 2020-07-07"},{"location":"changelog/#040-2020-07-06","text":"Create docs Fix api publish and listen methods","title":"0.4.0 - 2020-07-06"},{"location":"changelog/#031-2020-07-03","text":"Support load subscriber as script","title":"0.3.1 - 2020-07-03"},{"location":"changelog/#030-2020-07-03","text":"Create subscriber cli","title":"0.3.0 - 2020-07-03"},{"location":"changelog/#020-2020-07-02","text":"Create publish and listen methods for api","title":"0.2.0 - 2020-07-02"},{"location":"changelog/#-2020-07-02","text":"Create Api object from asyncapi spec","title":"- 2020-07-02"},{"location":"contributing/","text":"Starting Development git clone git@github.com:dutradda/asyncapi-python.git --recursive cd asyncapi make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-asyncapi bake dependencies Running the integration suite: bake integration Other bake tasks: bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Development - Contributing"},{"location":"contributing/#starting-development","text":"git clone git@github.com:dutradda/asyncapi-python.git --recursive cd asyncapi make setup-python-virtualenv source venv/bin/activate make setup-python-project bake setup-asyncapi bake dependencies","title":"Starting Development"},{"location":"contributing/#running-the-integration-suite","text":"bake integration","title":"Running the integration suite:"},{"location":"contributing/#other-bake-tasks","text":"bake check-code bake tests-docs bake serve-docs bake add-changelog m = \"Add my cool feature\" You can run bake to see all tasks available.","title":"Other bake tasks:"},{"location":"expose-docs/","text":"Serving the AsyncAPI Docs Serve docs from an already created spec asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API to manage users servers : development : url : localhost protocol : redis description : Development Broker Server channels : user/update : description : Topic for user updates subscribe : operationId : receive_user_update message : $ref : '#/components/messages/UserUpdate' publish : message : $ref : '#/components/messages/UserUpdate' components : messages : UserUpdate : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json asyncapi-docs --path api-spec.yaml INFO: Started server process [...] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Application startup complete. INFO: Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit) INFO: Shutting down INFO: Finished server process [...] Create subscriber module # user_events.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events from exposed spec PYTHONPATH = . asyncapi-subscriber \\ --url http://localhost:5000/asyncapi.json \\ --api-module user_events Publishing updates from exposed spec # publish.py import asyncio from asyncapi import build_api api = build_api ( 'http://localhost:5000/asyncapi.yaml' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user Request YAML Specification curl -i localhost:5000/asyncapi.yaml HTTP/1.1 200 OK date: ... server: uvicorn content-type: application/x-yaml content-length: 833 asyncapi: 2.0.0 channels: user/update: description: Topic for user updates publish: message: $ref: '#/components/messages/UserUpdate' subscribe: message: $ref: '#/components/messages/UserUpdate' operationId: receive_user_update components: messages: UserUpdate: name: userUpdate payload: properties: age: type: integer id: type: string name: type: string required: - id type: object summary: Inform about users updates title: User Update defaultContentType: application/json info: description: API to manage users title: User API version: 1.0.0 servers: development: description: Development Broker Server protocol: redis url: localhost Request JSON Specification curl -i localhost:5000/asyncapi.json HTTP/1.1 200 OK date: ... server: uvicorn content-type: application/json content-length: 1231 { \"info\": { \"title\": \"User API\", \"version\": \"1.0.0\", \"description\": \"API to manage users\" }, \"channels\": { \"user/update\": { \"description\": \"Topic for user updates\", \"publish\": { \"message\": { \"$ref\": \"#/components/messages/UserUpdate\" } }, \"subscribe\": { \"operationId\": \"receive_user_update\", \"message\": { \"$ref\": \"#/components/messages/UserUpdate\" } } } }, \"servers\": { \"development\": { \"url\": \"localhost\", \"protocol\": \"redis\", \"description\": \"Development Broker Server\" } }, \"components\": { \"messages\": { \"UserUpdate\": { \"payload\": { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\" }, \"name\": { \"type\": \"string\" }, \"age\": { \"type\": \"integer\" } }, \"required\": [ \"id\" ] }, \"name\": \"userUpdate\", \"title\": \"User Update\", \"summary\": \"Inform about users updates\" } } }, \"defaultContentType\": \"application/json\", \"asyncapi\": \"2.0.0\"","title":"Expose Docs"},{"location":"expose-docs/#serving-the-asyncapi-docs","text":"","title":"Serving the AsyncAPI Docs"},{"location":"expose-docs/#serve-docs-from-an-already-created-spec","text":"asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API to manage users servers : development : url : localhost protocol : redis description : Development Broker Server channels : user/update : description : Topic for user updates subscribe : operationId : receive_user_update message : $ref : '#/components/messages/UserUpdate' publish : message : $ref : '#/components/messages/UserUpdate' components : messages : UserUpdate : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json asyncapi-docs --path api-spec.yaml INFO: Started server process [...] INFO: Waiting for application startup. INFO: ASGI 'lifespan' protocol appears unsupported. INFO: Application startup complete. INFO: Uvicorn running on http://0.0.0.0:5000 (Press CTRL+C to quit) INFO: Shutting down INFO: Finished server process [...]","title":"Serve docs from an already created spec"},{"location":"expose-docs/#create-subscriber-module","text":"# user_events.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Create subscriber module"},{"location":"expose-docs/#start-subscriber-to-listen-events-from-exposed-spec","text":"PYTHONPATH = . asyncapi-subscriber \\ --url http://localhost:5000/asyncapi.json \\ --api-module user_events","title":"Start subscriber to listen events from exposed spec"},{"location":"expose-docs/#publishing-updates-from-exposed-spec","text":"# publish.py import asyncio from asyncapi import build_api api = build_api ( 'http://localhost:5000/asyncapi.yaml' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user","title":"Publishing updates from exposed spec"},{"location":"expose-docs/#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"expose-docs/#request-yaml-specification","text":"curl -i localhost:5000/asyncapi.yaml HTTP/1.1 200 OK date: ... server: uvicorn content-type: application/x-yaml content-length: 833 asyncapi: 2.0.0 channels: user/update: description: Topic for user updates publish: message: $ref: '#/components/messages/UserUpdate' subscribe: message: $ref: '#/components/messages/UserUpdate' operationId: receive_user_update components: messages: UserUpdate: name: userUpdate payload: properties: age: type: integer id: type: string name: type: string required: - id type: object summary: Inform about users updates title: User Update defaultContentType: application/json info: description: API to manage users title: User API version: 1.0.0 servers: development: description: Development Broker Server protocol: redis url: localhost","title":"Request YAML Specification"},{"location":"expose-docs/#request-json-specification","text":"curl -i localhost:5000/asyncapi.json HTTP/1.1 200 OK date: ... server: uvicorn content-type: application/json content-length: 1231 { \"info\": { \"title\": \"User API\", \"version\": \"1.0.0\", \"description\": \"API to manage users\" }, \"channels\": { \"user/update\": { \"description\": \"Topic for user updates\", \"publish\": { \"message\": { \"$ref\": \"#/components/messages/UserUpdate\" } }, \"subscribe\": { \"operationId\": \"receive_user_update\", \"message\": { \"$ref\": \"#/components/messages/UserUpdate\" } } } }, \"servers\": { \"development\": { \"url\": \"localhost\", \"protocol\": \"redis\", \"description\": \"Development Broker Server\" } }, \"components\": { \"messages\": { \"UserUpdate\": { \"payload\": { \"type\": \"object\", \"properties\": { \"id\": { \"type\": \"string\" }, \"name\": { \"type\": \"string\" }, \"age\": { \"type\": \"integer\" } }, \"required\": [ \"id\" ] }, \"name\": \"userUpdate\", \"title\": \"User Update\", \"summary\": \"Inform about users updates\" } } }, \"defaultContentType\": \"application/json\", \"asyncapi\": \"2.0.0\"","title":"Request JSON Specification"},{"location":"auto-spec/decorator/","text":"Automatic Specification decorator Creating subscribers module # user_events.py import dataclasses from typing import Optional from asyncapi import AutoSpec spec = AutoSpec ( 'User Events' , development = 'redis://localhost' ) @dataclasses . dataclass class UserUpdateMessage : id : str name : Optional [ str ] = None age : Optional [ int ] = None @spec . subscribe ( channel_name = 'user/update' ) async def receive_user_update ( message : UserUpdateMessage ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events PYTHONPATH = . asyncapi-subscriber --api-module user_events Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'user_events' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user Expose Specification PYTHONPATH = . asyncapi-docs --api-module user_events curl -i localhost:5000/asyncapi.yaml","title":"Specification decorator"},{"location":"auto-spec/decorator/#automatic-specification-decorator","text":"","title":"Automatic Specification decorator"},{"location":"auto-spec/decorator/#creating-subscribers-module","text":"# user_events.py import dataclasses from typing import Optional from asyncapi import AutoSpec spec = AutoSpec ( 'User Events' , development = 'redis://localhost' ) @dataclasses . dataclass class UserUpdateMessage : id : str name : Optional [ str ] = None age : Optional [ int ] = None @spec . subscribe ( channel_name = 'user/update' ) async def receive_user_update ( message : UserUpdateMessage ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Creating subscribers module"},{"location":"auto-spec/decorator/#start-subscriber-to-listen-events","text":"PYTHONPATH = . asyncapi-subscriber --api-module user_events Waiting messages...","title":"Start subscriber to listen events"},{"location":"auto-spec/decorator/#publishing-updates","text":"# publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'user_events' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user","title":"Publishing Updates"},{"location":"auto-spec/decorator/#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"auto-spec/decorator/#expose-specification","text":"PYTHONPATH = . asyncapi-docs --api-module user_events curl -i localhost:5000/asyncapi.yaml","title":"Expose Specification"},{"location":"auto-spec/module/","text":"Automatic Specification module Creating automatic specification # specification.py from user_events import receive_user_update from asyncapi import AutoSpec spec = AutoSpec ( 'User Events' , development = 'redis://localhost' ) spec . subscribe ( receive_user_update , channel_name = 'user/update' ) Creating subscribers module # user_events.py import dataclasses from typing import Optional @dataclasses . dataclass class UserUpdateMessage : id : str name : Optional [ str ] = None age : Optional [ int ] = None async def receive_user_update ( message : UserUpdateMessage ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events PYTHONPATH = . asyncapi-subscriber --api-module specification Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'specification' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user Expose Specification PYTHONPATH = . asyncapi-docs --api-module specification curl -i localhost:5000/asyncapi.yaml","title":"Specification module"},{"location":"auto-spec/module/#automatic-specification-module","text":"","title":"Automatic Specification module"},{"location":"auto-spec/module/#creating-automatic-specification","text":"# specification.py from user_events import receive_user_update from asyncapi import AutoSpec spec = AutoSpec ( 'User Events' , development = 'redis://localhost' ) spec . subscribe ( receive_user_update , channel_name = 'user/update' )","title":"Creating automatic specification"},{"location":"auto-spec/module/#creating-subscribers-module","text":"# user_events.py import dataclasses from typing import Optional @dataclasses . dataclass class UserUpdateMessage : id : str name : Optional [ str ] = None age : Optional [ int ] = None async def receive_user_update ( message : UserUpdateMessage ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Creating subscribers module"},{"location":"auto-spec/module/#start-subscriber-to-listen-events","text":"PYTHONPATH = . asyncapi-subscriber --api-module specification Waiting messages...","title":"Start subscriber to listen events"},{"location":"auto-spec/module/#publishing-updates","text":"# publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'specification' ) channel_id = 'user/update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user","title":"Publishing Updates"},{"location":"auto-spec/module/#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"auto-spec/module/#expose-specification","text":"PYTHONPATH = . asyncapi-docs --api-module specification curl -i localhost:5000/asyncapi.yaml","title":"Expose Specification"},{"location":"gcloud-pubsub/http-specification/","text":"From an Exposed HTTP Specification To reproduce this example you will need a local pubsub emulator running on port 8086. The project repository has a docker-compose file setting up the emulator. Specification Example The url attribute of the Server Object is the Google Cloud Platform project_id . asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API to manage users servers : development : url : asyncapi-local protocol : gcloud-pubsub description : Development Broker Server channels : user-update : description : Topic for user updates publish : message : $ref : '#/components/messages/UserUpdate' components : messages : UserUpdate : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json Expose the Specification Assuming that the above specification has the name api-spec.yaml : asyncapi-docs --path api-spec.yaml Creating subscribers module # user_events.py from typing import Any , Awaitable , Callable async def receive_user_update ( message : Any , ack_func : Callable [[], Awaitable [ None ]] ) -> None : print ( f \"Received update for user id= { message . id } \" ) await ack_func () Start subscriber to listen events This specification don't declares subscribers. It is intentional because google pubsub can accept multiple subscribers with differents channel names on the same topic. We will use the channels-subscribes argument of the subscriber runner to set the pubsub subscription. PUBSUB_EMULATOR_HOST = localhost:8086 PYTHONPATH = . asyncapi-subscriber \\ --url http://localhost:5000/asyncapi.yaml \\ --api-module user_events \\ --channels-subscribes 'user-update:user-update-custom-sub=receive_user_update' Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api api = build_api ( 'http://localhost:5000/asyncapi.yaml' ) channel_id = 'user-update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user","title":"HTTP Specification"},{"location":"gcloud-pubsub/http-specification/#from-an-exposed-http-specification","text":"To reproduce this example you will need a local pubsub emulator running on port 8086. The project repository has a docker-compose file setting up the emulator.","title":"From an Exposed HTTP Specification"},{"location":"gcloud-pubsub/http-specification/#specification-example","text":"The url attribute of the Server Object is the Google Cloud Platform project_id . asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API to manage users servers : development : url : asyncapi-local protocol : gcloud-pubsub description : Development Broker Server channels : user-update : description : Topic for user updates publish : message : $ref : '#/components/messages/UserUpdate' components : messages : UserUpdate : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json","title":"Specification Example"},{"location":"gcloud-pubsub/http-specification/#expose-the-specification","text":"Assuming that the above specification has the name api-spec.yaml : asyncapi-docs --path api-spec.yaml","title":"Expose the Specification"},{"location":"gcloud-pubsub/http-specification/#creating-subscribers-module","text":"# user_events.py from typing import Any , Awaitable , Callable async def receive_user_update ( message : Any , ack_func : Callable [[], Awaitable [ None ]] ) -> None : print ( f \"Received update for user id= { message . id } \" ) await ack_func ()","title":"Creating subscribers module"},{"location":"gcloud-pubsub/http-specification/#start-subscriber-to-listen-events","text":"This specification don't declares subscribers. It is intentional because google pubsub can accept multiple subscribers with differents channel names on the same topic. We will use the channels-subscribes argument of the subscriber runner to set the pubsub subscription. PUBSUB_EMULATOR_HOST = localhost:8086 PYTHONPATH = . asyncapi-subscriber \\ --url http://localhost:5000/asyncapi.yaml \\ --api-module user_events \\ --channels-subscribes 'user-update:user-update-custom-sub=receive_user_update' Waiting messages...","title":"Start subscriber to listen events"},{"location":"gcloud-pubsub/http-specification/#publishing-updates","text":"# publish.py import asyncio from asyncapi import build_api api = build_api ( 'http://localhost:5000/asyncapi.yaml' ) channel_id = 'user-update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user","title":"Publishing Updates"},{"location":"gcloud-pubsub/http-specification/#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"gcloud-pubsub/python-specification/","text":"From a Python Specification To reproduce this example you will need a local pubsub emulator running on port 8086. The project repository has a docker-compose file setting up the emulator. Specification Example The url attribute of the Server Object is the Google Cloud Platform project_id . # specification.py import dataclasses from typing import Optional import asyncapi @dataclasses . dataclass class UserUpdatePayload : id : str name : Optional [ str ] = None age : Optional [ int ] = None dev_server = asyncapi . Server ( url = 'asyncapi-local' , protocol = asyncapi . ProtocolType . GCLOUD_PUBSUB , description = 'Development Broker Server' , ) message = asyncapi . Message ( name = 'userUpdate' , title = 'User Update' , summary = 'Inform about users updates' , payload = UserUpdatePayload , ) user_update_channel = asyncapi . Channel ( description = 'Topic for user updates' , publish = asyncapi . Operation ( message = message ), ) spec = asyncapi . Specification ( info = asyncapi . Info ( title = 'User API' , version = '1.0.0' , description = 'API to manage users' , ), servers = { 'development' : dev_server }, channels = { 'user-update' : user_update_channel }, components = asyncapi . Components ( messages = { 'UserUpdate' : message }), ) Creating subscribers module # user_events.py from typing import Awaitable , Callable import specification spec = specification . spec async def receive_user_update ( message : specification . UserUpdatePayload , ack_func : Callable [[], Awaitable [ None ]], ) -> None : print ( f \"Received update for user id= { message . id } \" ) await ack_func () Start subscriber to listen events This specification don't declares subscribers. It is intentional because google pubsub can accept multiple subscribers with differents channel names on the same topic. We will use the channels-subscribes argument of the subscriber runner to set the pubsub subscription. PUBSUB_EMULATOR_HOST = localhost:8086 PYTHONPATH = . asyncapi-subscriber \\ --api-module user_events \\ --channels-subscribes 'user-update:user-update-custom-sub=receive_user_update' Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'specification' ) channel_id = 'user-update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user","title":"Python Specification"},{"location":"gcloud-pubsub/python-specification/#from-a-python-specification","text":"To reproduce this example you will need a local pubsub emulator running on port 8086. The project repository has a docker-compose file setting up the emulator.","title":"From a Python Specification"},{"location":"gcloud-pubsub/python-specification/#specification-example","text":"The url attribute of the Server Object is the Google Cloud Platform project_id . # specification.py import dataclasses from typing import Optional import asyncapi @dataclasses . dataclass class UserUpdatePayload : id : str name : Optional [ str ] = None age : Optional [ int ] = None dev_server = asyncapi . Server ( url = 'asyncapi-local' , protocol = asyncapi . ProtocolType . GCLOUD_PUBSUB , description = 'Development Broker Server' , ) message = asyncapi . Message ( name = 'userUpdate' , title = 'User Update' , summary = 'Inform about users updates' , payload = UserUpdatePayload , ) user_update_channel = asyncapi . Channel ( description = 'Topic for user updates' , publish = asyncapi . Operation ( message = message ), ) spec = asyncapi . Specification ( info = asyncapi . Info ( title = 'User API' , version = '1.0.0' , description = 'API to manage users' , ), servers = { 'development' : dev_server }, channels = { 'user-update' : user_update_channel }, components = asyncapi . Components ( messages = { 'UserUpdate' : message }), )","title":"Specification Example"},{"location":"gcloud-pubsub/python-specification/#creating-subscribers-module","text":"# user_events.py from typing import Awaitable , Callable import specification spec = specification . spec async def receive_user_update ( message : specification . UserUpdatePayload , ack_func : Callable [[], Awaitable [ None ]], ) -> None : print ( f \"Received update for user id= { message . id } \" ) await ack_func ()","title":"Creating subscribers module"},{"location":"gcloud-pubsub/python-specification/#start-subscriber-to-listen-events","text":"This specification don't declares subscribers. It is intentional because google pubsub can accept multiple subscribers with differents channel names on the same topic. We will use the channels-subscribes argument of the subscriber runner to set the pubsub subscription. PUBSUB_EMULATOR_HOST = localhost:8086 PYTHONPATH = . asyncapi-subscriber \\ --api-module user_events \\ --channels-subscribes 'user-update:user-update-custom-sub=receive_user_update' Waiting messages...","title":"Start subscriber to listen events"},{"location":"gcloud-pubsub/python-specification/#publishing-updates","text":"# publish.py import asyncio from asyncapi import build_api_auto_spec api = build_api_auto_spec ( 'specification' ) channel_id = 'user-update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user","title":"Publishing Updates"},{"location":"gcloud-pubsub/python-specification/#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"},{"location":"gcloud-pubsub/server-bindings/","text":"GCloud PubSub Server Bindings The AsyncAPI Specification allows custom properties for the protocols that the server runs. Here we will use custom parameters to control the pubsub EventsHandler. To reproduce this example you will need a local pubsub emulator running on port 8086. The project repository has a docker-compose file setting up the emulator. Specification Example The url attribute of the Server Object is the Google Cloud Platform project_id . asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API to manage users servers : development : url : asyncapi-local protocol : gcloud-pubsub description : Development Broker Server channels : user-update : description : Topic for user updates publish : message : $ref : '#/components/messages/UserUpdate' components : messages : UserUpdate : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json Expose the Specification Assuming that the above specification has the name api-spec.yaml : asyncapi-docs --path api-spec.yaml Creating subscribers module # user_events.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" ) Start subscriber to listen events For pubsub custom attributes we will use the server-bindings argument of the subscriber runner. The pubsub EventsHandler accept two parameters: consumer_wait_time and consumer_ack_messages . The first one is used to wait if there are no messages to consume. The default value is 1 second. The second parameter tells the EventsHandler to acknowledge the message or not. The default value is True . When consumer_ack_messages is False , the acknowledge function will be set on subscriber kwargs by the name ack_func . This specification don't declares subscribers. It is intentional because google pubsub can accept multiple subscribers with differents channel names on the same topic. We will use the channels-subscribes argument of the subscriber runner to set the pubsub subscription. PUBSUB_EMULATOR_HOST = localhost:8086 PYTHONPATH = . asyncapi-subscriber \\ --url http://localhost:5000/asyncapi.yaml \\ --api-module user_events \\ --channels-subscribes 'user-update:user-update-custom-sub=receive_user_update' \\ --server-bindings 'gcloud-pubsub:consumer_wait_time=0.1;consumer_ack_messages=1' Waiting messages... Publishing Updates # publish.py import asyncio from asyncapi import build_api api = build_api ( 'http://localhost:5000/asyncapi.yaml' ) channel_id = 'user-update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user Receive Updates Waiting messages... Received update for user id=fake-user","title":"PubSub Server Bindings"},{"location":"gcloud-pubsub/server-bindings/#gcloud-pubsub-server-bindings","text":"The AsyncAPI Specification allows custom properties for the protocols that the server runs. Here we will use custom parameters to control the pubsub EventsHandler. To reproduce this example you will need a local pubsub emulator running on port 8086. The project repository has a docker-compose file setting up the emulator.","title":"GCloud PubSub Server Bindings"},{"location":"gcloud-pubsub/server-bindings/#specification-example","text":"The url attribute of the Server Object is the Google Cloud Platform project_id . asyncapi : 2.0.0 info : title : User API version : '1.0.0' description : API to manage users servers : development : url : asyncapi-local protocol : gcloud-pubsub description : Development Broker Server channels : user-update : description : Topic for user updates publish : message : $ref : '#/components/messages/UserUpdate' components : messages : UserUpdate : name : userUpdate title : User Update summary : Inform about users updates payload : type : object required : - id properties : id : type : string name : type : string age : type : integer defaultContentType : application/json","title":"Specification Example"},{"location":"gcloud-pubsub/server-bindings/#expose-the-specification","text":"Assuming that the above specification has the name api-spec.yaml : asyncapi-docs --path api-spec.yaml","title":"Expose the Specification"},{"location":"gcloud-pubsub/server-bindings/#creating-subscribers-module","text":"# user_events.py from typing import Any async def receive_user_update ( message : Any ) -> None : print ( f \"Received update for user id= { message . id } \" )","title":"Creating subscribers module"},{"location":"gcloud-pubsub/server-bindings/#start-subscriber-to-listen-events","text":"For pubsub custom attributes we will use the server-bindings argument of the subscriber runner. The pubsub EventsHandler accept two parameters: consumer_wait_time and consumer_ack_messages . The first one is used to wait if there are no messages to consume. The default value is 1 second. The second parameter tells the EventsHandler to acknowledge the message or not. The default value is True . When consumer_ack_messages is False , the acknowledge function will be set on subscriber kwargs by the name ack_func . This specification don't declares subscribers. It is intentional because google pubsub can accept multiple subscribers with differents channel names on the same topic. We will use the channels-subscribes argument of the subscriber runner to set the pubsub subscription. PUBSUB_EMULATOR_HOST = localhost:8086 PYTHONPATH = . asyncapi-subscriber \\ --url http://localhost:5000/asyncapi.yaml \\ --api-module user_events \\ --channels-subscribes 'user-update:user-update-custom-sub=receive_user_update' \\ --server-bindings 'gcloud-pubsub:consumer_wait_time=0.1;consumer_ack_messages=1' Waiting messages...","title":"Start subscriber to listen events"},{"location":"gcloud-pubsub/server-bindings/#publishing-updates","text":"# publish.py import asyncio from asyncapi import build_api api = build_api ( 'http://localhost:5000/asyncapi.yaml' ) channel_id = 'user-update' message = api . payload ( channel_id , id = 'fake-user' , name = 'Fake User' , age = 33 ) async def publish () -> None : await api . connect () await api . publish ( channel_id , message ) await api . disconnect () asyncio . run ( publish ()) print ( f \"Published update for user= { message . id } \" ) python publish.py Published update for user=fake-user","title":"Publishing Updates"},{"location":"gcloud-pubsub/server-bindings/#receive-updates","text":"Waiting messages... Received update for user id=fake-user","title":"Receive Updates"}]}